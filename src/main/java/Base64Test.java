import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Base64;

public class Base64Test {

    public static void main(String args[]) throws UnsupportedEncodingException {
//        String base64encodedString = Base64.getEncoder().encodeToString(readFileToByteArray());
//        System.out.println("Base64 Encoded String (Basic) :" + base64encodedString);

        byte[] base64decodedBytes = Base64.getDecoder().decode("");

        System.out.println("Original String: " + new String(base64decodedBytes, "utf-8"));
    }

    private static byte[] readFileToByteArray(){
        File file = new File("Token.xml");
        FileInputStream fis = null;
        // Creating a byte array using the length of the file
        // file.length returns long which is cast to int
        byte[] bArray = new byte[(int) file.length()];
        try{
            fis = new FileInputStream(file);
            fis.read(bArray);
            fis.close();

        }catch(IOException ioExp){
            ioExp.printStackTrace();
        }
        return bArray;
    }
}
